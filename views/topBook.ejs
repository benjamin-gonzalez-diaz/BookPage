<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Top 50 Selling Books of All Time </title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }
    .navbar {
      background-color: #333;
      overflow: hidden;
      display: flex;
      justify-content: center;
    }
    .navbar a {
      display: block;
      color: white;
      text-align: center;
      padding: 14px 16px;
      text-decoration: none;
    }
    .navbar a:hover {
      background-color: #ddd;
      color: black;
    }
  </style>
</head>

<body>
  <div class="navbar">
    <a href="http://localhost:3000/Author_Stats_Table">Author Stats Table</a>
    <a href="http://localhost:3000/topbook">Top Books</a>
    <a href="http://localhost:3000/topReview">Top Reviews</a>
    <a href="http://localhost:3000/topReview/worst">Worst Reviews</a>
    <a href="http://localhost:3000/">main menu</a>
  </div>
  <input type="text" id="myInput" onkeyup="myFunction(0)" placeholder="Buscar por título...">
  <table id="myTable">
    <style>
      table {
        border-collapse: collapse;
        width: 100%;
      }
      th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #f2f2f2;
      }
    </style>
    <tr>
        <th>-</th>
      <th onclick="sortTable(0)">Libro</th>
      <th onclick="sortTable(1)">Ventas Totales del Libro</th>
      <th onclick="sortTable(2)">Ventas Totales del Autor</th>
      <th onclick="sortTable(3)">Estuvo Entre los 5 Más Vendidos</th>
    </tr>
    <% let count = 0%>
    <% books.slice(0, 50).forEach(book => { %>
      <tr>
        <% count ++; %>
        <td><%= count %></td>
        <td><%= book.nombre %></td>
        <td><%= book.numberofsales %></td>
        <td>
          <% 
            const author = Authors.find(author => author.id === book.author);
            const authorBooks = books.filter(b => b.author === book.author);
            let totalAuthorSales = 0;
            authorBooks.forEach(b => {
              totalAuthorSales += b.numberofsales;
            });
          %>
          <%= totalAuthorSales %>
        </td>
        <td>
          <% 
            const top5Year = sales.filter(sale => sale.book === book.id).sort((a, b) => b.sales - a.sales)[0];
            if (top5Year && top5Year.sales > 5) { %>
              Sí (<%= top5Year.year %>)
          <% } else { %>
              No
          <% } %>
        </td>
      </tr>
    <% }); %>
  </table>
</body>

</html>

<script>
    function sortTable(n) {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable2");
      switching = true;
      // Set the sorting direction to ascending:
      dir = "asc";
      /* Make a loop that will continue until
      no switching has been done: */
      while (switching) {
        // Start by saying: no switching is done:
        switching = false;
        rows = table.rows;
        /* Loop through all table rows (except the
        first, which contains table headers): */
        for (i = 1; i < (rows.length - 1); i++) {
          // Start by saying there should be no switching:
          shouldSwitch = false;
          /* Get the two elements you want to compare,
          one from current row and one from the next: */
          x = rows[i].getElementsByTagName("TD")[n];
          y = rows[i + 1].getElementsByTagName("TD")[n];
          /* Check if the two rows should switch place,
          based on the direction, asc or desc: */
          if (dir == "asc") {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              // If so, mark as a switch and break the loop:
              shouldSwitch = true;
              break;
            }
          } else if (dir == "desc") {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              // If so, mark as a switch and break the loop:
              shouldSwitch = true;
              break;
            }
          }
        }
        if (shouldSwitch) {
          /* If a switch has been marked, make the switch
          and mark that a switch has been done: */
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          // Each time a switch is done, increase this count by 1:
          switchcount ++;
        } else {
          /* If no switching has been done AND the direction is "asc",
          set the direction to "desc" and run the while loop again. */
          if (switchcount == 0 && dir == "asc") {
            dir = "desc";
            switching = true;
          }
        }
      }
    }
  </script>
  
  <script>
    function myFunction(n) {
      // Declare variables
      var input, filter, table, tr, td, i, txtValue;
      input = document.getElementById("myInput");
      filter = input.value.toUpperCase();
      table = document.getElementById("myTable2");
      tr = table.getElementsByTagName("tr");
    
      // Loop through all table rows, and hide those who don't match the search query
      for (i = n; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td")[n];
        if (td) {
          txtValue = td.textContent || td.innerText;
          if (txtValue.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
          } else {
            tr[i].style.display = "none";
          }
        }
      }
    }
    </script>
